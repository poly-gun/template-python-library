default:
    tags:
        - runner-exampl
stages:
    - Testing
    - Build
    - Distribution
    - Release

workflow:
    rules:
        -   when: always
        -   if: $CI_COMMIT_MESSAGE =~ /wip-/
            when: never
        # -   if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
        #     changes:
        #         paths:
        #             - CHANGELOG.md
        #     when: never

Unit-Tests:
    stage: Testing
    image: python:3-slim-bookworm
    before_script:
        - apt update && apt install -y git
        - python -m pip install --root-user-action "ignore" --upgrade pip build setuptools
        - python -m pip install --root-user-action "ignore" ".[testing]"
    script:
        - python -m pytest --junit-xml unit-testing.xml || true
    artifacts:
        when: always
        paths:
            - unit-testing.xml
        reports:
            junit: unit-testing.xml

Security:
    stage: Testing
    image: registry.example.com/proxy/docker:dind
    script:
        - echo "Under Development"
    artifacts: { }
    needs: [ ]

Metadata:
    stage: Build
    image: registry.example.com/proxy/docker:dind
    script:
        - |
            cat << EOF > "${CI_PROJECT_DIR}/metadata.json"
            {
                "commit-sha": "${CI_COMMIT_SHA}",
                "project": "${CI_PROJECT_NAME}",
                "branch": "${CI_COMMIT_REF_NAME}"
            }
            EOF
    after_script:
        - cat "${CI_PROJECT_DIR}/metadata.json"
    artifacts:
        paths:
            - "${CI_PROJECT_DIR}/metadata.json"
    needs: [ ]

Documentation:
    stage: Build
    image: registry.example.com/proxy/docker:dind
    script:
        - echo "Under Development"
    artifacts: { }
    needs: [ ]
    rules:
        -   if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'

Release-Notes:
    stage: Build
    image: alpine:latest
    rules:
        -   if: '$CI_COMMIT_TAG =~ /^(\d+\.\d+\.\d+)$/'
    script:
        - apk add curl jq
        - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG" | jq -r .notes > release-notes.md'
        - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" -X POST "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG"'
    needs: [ ]
    artifacts:
        paths:
            - release-notes.md

Artifactory:
    stage: Distribution
    image: python:3-slim-bookworm
    variables:
        TWINE_PASSWORD: "${ARTIFACTORY_PASSWORD}"
        TWINE_USERNAME: "${ARTIFACTORY_USERNAME}"
        TWINE_REPOSITORY_URL: "https://artifactory.example.com/artifactory/api/pypi/pypi-local"
    before_script:
        - apt update && apt install -y git
        - python -m pip install --root-user-action "ignore" --upgrade pip build setuptools
        - python -m pip install --root-user-action "ignore" --upgrade twine
    script:
        - python -m build --verbose --outdir distribution .
        - python -m twine upload --verbose --non-interactive --comment "${GITLAB_USER_NAME:-"CI-CD"}" distribution/*
    rules:
        -   if: '$CI_COMMIT_TAG =~ /^(\d+\.\d+\.\d+)$/'
            when: always
        -   when: never
    artifacts:
        paths:
            - "**/distribution/*.whl"
            - "**/distribution/*.tar.gz"
    needs: [ ]

Publish:
    stage: Release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    rules:
        -   if: $CI_COMMIT_TAG # Run this job when a tag is created
    script:
        - echo "Executing Release Job"
    release: # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
        name: "Release: ${CI_COMMIT_TAG}"
        tag_name: "${CI_COMMIT_TAG}"
        description: "release-notes.md"
        ref: "${CI_COMMIT_SHA}"
        # assets:
        #     links:
        #         -   name: 'Container Image $CI_COMMIT_TAG'
        #             url: "https://$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    needs:
        -   job: Release-Notes
            artifacts: true
